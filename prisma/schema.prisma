// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Role {
    ADMIN
    CUSTOMER
    EMPLOYEE
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String        @id @default(cuid())
    name                String?
    email               String        @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    role                Role          @default(CUSTOMER)
    customerInformation Customer?
    employee            Employee?
    tickets             Ticket[]
    transactions        Transaction[]
}

model Customer {
    isMember       Boolean       @default(false)
    newsletter     Boolean       @default(false)
    loungeDiscount Boolean       @default(false)
    address        String        @default("")
    transactions   Transaction[]
    tickets        Ticket[]
    flightCoupon   Boolean       @default(false)
    user           User          @relation(fields: [userId], references: [id])
    userId         String        @unique
}

model Employee {
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
    role   String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Aircraft {
    id      Int      @id @default(autoincrement())
    name    String
    flights Flight[]
    seats   Seat[]
}

model Flight {
    id                   Int      @id @default(autoincrement())
    departureAirportCode String
    arrivalAirportCode   String
    departureTime        DateTime
    arrivalTime          DateTime
    arrivalCity          String
    departureCity        String
    aircraft             Aircraft @relation(fields: [aircraftId], references: [id])
    aircraftId           Int
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    tickets              Ticket[]
    airline              String
    price                Float
}

enum SeatType {
    ECONOMY
    BUSINESS
    FIRST
}

model Seat {
    id         Int      @id @default(autoincrement())
    seatCode   String
    available  Boolean  @default(true)
    seatType   SeatType
    aircraft   Aircraft @relation(fields: [aircraftId], references: [id])
    aircraftId Int
    tickets    Ticket[]
}

model Ticket {
    id             Int       @id @default(autoincrement())
    seat           Seat      @relation(fields: [seatId], references: [id])
    seatId         Int
    flight         Flight    @relation(fields: [flightId], references: [id])
    flightId       Int
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    user           User?     @relation(fields: [userId], references: [id])
    userId         String?
    Customer       Customer? @relation(fields: [customerUserId], references: [userId])
    customerUserId String?
}

model Transaction {
    id                   Int       @id @default(autoincrement())
    price                Float
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt
    user                 User      @relation(fields: [userId], references: [id])
    userId               String
    seatType             SeatType
    seatCode             String
    aircraftID           Int
    departureAirportCode String
    arrivalAirportCode   String
    departureTime        DateTime
    arrivalTime          DateTime
    arrivalCity          String
    departureCity        String
    Customer             Customer? @relation(fields: [customerUserId], references: [userId])
    customerUserId       String?
}
